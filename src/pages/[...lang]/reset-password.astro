---
import {
  getLocaleFromParams,
  useTranslationsFromParams,
  localizeUrl
} from "@/i18n/utils";
import Layout from "@/layouts/Layout.astro";
import {actions, isInputError} from "astro:actions";
import {Button} from "@/components/ui/button";
import {PasswordField} from "@/components/PasswordField.tsx";

if (Astro.locals.user?.id)
  return Astro.redirect(
    localizeUrl("/dashboard", getLocaleFromParams(Astro.params))
  );

const t = useTranslationsFromParams(Astro.params);

const errors = {
  newPassword: "",
  confirmPassword: "",
  server: "",
  invalidToken: ""
};

const fields = {
  newPassword: "",
  confirmPassword: ""
};

const token = Astro.url.searchParams.get("token");

if (!token) {
  return Astro.redirect(
    localizeUrl("/sign-in", getLocaleFromParams(Astro.params))
  );
}

if (Astro.request.method === "POST") {
  const error = Astro.url.searchParams.get("error");

  if (error === "invalid_token") {
    errors.invalidToken = "This link is invalid or expired.";
  } else if (token) {
    const formData = await Astro.request.formData();
    fields.newPassword = formData.get("newPassword") as string;
    fields.confirmPassword = formData.get("confirmPassword") as string;

    const {data, error} = await Astro.callAction(
      actions.authentication.resetPassword,
      {
        newPassword: fields.newPassword,
        confirmPassword: fields.confirmPassword,
        token
      }
    );

    if (error) {
      if (isInputError(error)) {
        errors.newPassword = error.fields.newPassword?.join(", ") ?? "";
        errors.confirmPassword = error.fields.confirmPassword?.join(", ") ?? "";
      } else {
        errors.server = error.message;
      }
    } else if (data?.redirect) {
      return Astro.redirect(data.redirect);
    }
  }
}
---

<Layout>
  <div
    class="flex min-h-[70dvh] w-full flex-col items-center justify-center py-12"
  >
    <div class="w-full max-w-xs">
      <h1 class="mb-8 text-center text-2xl font-bold">
        {t.auth.resetPassword}
      </h1>
      {
        errors.invalidToken ? (
          <p class="mt-4 text-center text-sm">{errors.invalidToken}</p>
        ) : (
          <form method="POST" class="space-y-4">
            <PasswordField
              required
              name="newPassword"
              placeholder={t.auth.newPassword}
              defaultValue={fields.newPassword}
              client:load
            />

            <div class="mb-4" />

            {errors.newPassword && (
              <span class="ml-2 text-xs text-red-500">
                {errors.newPassword}
              </span>
            )}

            <PasswordField
              required
              name="confirmPassword"
              placeholder={t.auth.confirmNewPassword}
              defaultValue={fields.confirmPassword}
              client:load
            />
            {errors.confirmPassword && (
              <span class="ml-2 text-xs text-red-500">
                {errors.confirmPassword}
              </span>
            )}

            {errors.server && (
              <span class="ml-2 text-xs text-red-500">{errors.server}</span>
            )}

            <Button type="submit" className="mt-4 w-full" >
              {t.auth.resetPassword}
            </Button>
          </form>
        )
      }
    </div>
  </div>
</Layout>
