---
import Layout from "@/layouts/Layout.astro";
import {Button} from "@/components/ui/button";
import {Input} from "@/components/ui/input";
import {PasswordField} from "@/components/PasswordField.tsx";
import Mail from "@/assets/mail.svg";
import {createAuth} from "@/lib/auth";
import {APIError} from "better-auth/api";
import {
  getLocaleFromParams,
  useTranslationsFromParams,
  localizeUrl
} from "@/i18n/utils";

const locale = getLocaleFromParams(Astro.params);
const t = useTranslationsFromParams(Astro.params);

if (Astro.locals.user?.id) {
  return Astro.redirect(localizeUrl("/dashboard", locale));
}

const errors = {
  email: "",
  password: "",
  server: ""
};

const fields = {
  email: "",
  password: ""
};

if (Astro.request.method === "POST") {
  const auth = createAuth(Astro.locals.runtime.env);

  try {
    const formData = await Astro.request.formData();
    const email = formData.get("email") as string;
    const password = formData.get("password") as string;

    fields.email = email;
    fields.password = password;

    const response = await auth.api.signInEmail({
      body: {
        email,
        password,
        callbackURL: localizeUrl("/dashboard", locale)
      },
      asResponse: true,
      headers: Astro.request.headers
    });

    if (!response.ok) {
      if (response.status === 401) {
        throw new APIError("UNAUTHORIZED");
      } else if (response.status === 403) {
        throw new APIError("FORBIDDEN");
      } else {
        throw new APIError("INTERNAL_SERVER_ERROR");
      }
    } else {
      return new Response(null, {
        status: 302,
        headers: {
          Location: localizeUrl("/dashboard", locale),
          "Set-Cookie": response.headers.get("set-cookie") || ""
        }
      });
    }
  } catch (error) {
    if (error instanceof APIError) {
      if (error.status === "UNAUTHORIZED") {
        errors.server = t.auth.invalidCredentials;
      } else if (error.status === "FORBIDDEN") {
        errors.server = t.auth.emailNotVerified;
      } else {
        errors.server = t.auth.somethingWentWrong;
      }
    } else {
      throw error;
    }
  }
}

const signUpUrl = localizeUrl("/sign-up", locale);
const forgotPasswordUrl = localizeUrl("/forgot-password", locale);
---

<Layout title={t.auth.signin}>
  <div
    class="flex min-h-[70dvh] w-full flex-col items-center justify-center py-12"
  >
    <div class="w-full max-w-xs">
      <h1 class="mb-8 text-center text-2xl font-bold">{t.auth.signin}</h1>

      <form method="POST" class="space-y-4">
        <div
          class="focus-within:ring-ring relative flex items-center rounded-md border pl-2 focus-within:ring-1"
        >
          <Mail class="text-muted-foreground mr-1 h-5 w-5" />
          <Input
            type="email"
            placeholder={t.auth.email}
            className="border-0 bg-transparent shadow-none focus-visible:ring-0 dark:bg-transparent"
            name="email"
            required
            defaultValue={fields.email}
          />
          {
            errors.email && (
              <span class="ml-2 text-xs text-red-500">{errors.email}</span>
            )
          }
        </div>

        <PasswordField
          name="password"
          required
          defaultValue={fields.password}
          placeholder={t.auth.password}
          client:load
        />

        {
          errors.password && (
            <span class="ml-2 text-xs text-red-500">{errors.password}</span>
          )
        }

        <div class="flex justify-end">
          <a
            href={forgotPasswordUrl}
            class="text-muted-foreground hover:text-primary pt-1 text-xs transition-colors"
          >
            {t.auth.forgotPassword}
          </a>
        </div>

        {
          errors.server && (
            <span class="ml-2 text-xs text-red-500">{errors.server}</span>
          )
        }

        <Button type="submit" className="mt-4 w-full">{t.auth.signin}</Button>

        <p class="mt-4 text-center text-sm">
          {t.auth.dontHaveAccount}{" "}
          <a href={signUpUrl} class="text-primary underline">
            {t.auth.signupHere}
          </a>
        </p>
      </form>
    </div>
  </div>
</Layout>
