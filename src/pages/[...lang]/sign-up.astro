---
import Layout from "@/layouts/Layout.astro";
import {Button} from "@/components/ui/button";
import {IconInputField} from "@/components/IconInputField.tsx";
import {PasswordField} from "@/components/PasswordField.tsx";
import ErrorMessage from "@/components/ErrorMessage.astro";
import {createAuth} from "@/lib/auth";
import {APIError} from "better-auth/api";
import {
  getLocaleFromParams,
  localizeUrl,
  useTranslationsFromParams
} from "@/i18n/utils";

const locale = getLocaleFromParams(Astro.params);
const t = useTranslationsFromParams(Astro.params);

if (Astro.locals.user?.id)
  return Astro.redirect(localizeUrl("/dashboard", locale));

const errors = {
  name: "",
  email: "",
  password: "",
  server: ""
};

const fields = {
  name: "",
  email: "",
  password: ""
};

if (Astro.request.method === "POST") {
  const auth = createAuth(Astro.locals.runtime.env);
  try {
    const formData = await Astro.request.formData();
    const name = formData.get("name") as string;
    const email = formData.get("email") as string;
    const password = formData.get("password") as string;

    fields.name = name;
    fields.email = email;
    fields.password = password;

    const response = await auth.api.signUpEmail({
      body: {
        name,
        email,
        password
      },
      asResponse: true
    });

    if (!response.ok) {
      const errorData = (await response.json()) as {
        status?: string;
        [key: string]: any;
      };

      type BetterAuthStatus = ConstructorParameters<typeof APIError>[0];
      const status = (errorData.status ??
        "INTERNAL_SERVER_ERROR") as BetterAuthStatus;

      throw new APIError(status, errorData);
    } else {
      return new Response(null, {
        status: 302,
        headers: {
          Location: localizeUrl("/dashboard", locale),
          "Set-Cookie": response.headers.get("set-cookie") || ""
        }
      });
    }
  } catch (error) {
    if (error instanceof APIError) {
      if (error.status === "CONFLICT") {
        errors.server = "Email already exists. Please use a different email.";
      } else {
        if (error.body?.code === "PASSWORD_TOO_SHORT") {
          errors.password = "Password must be at least 8 characters long.";
        } else if (error.body?.code === "USER_ALREADY_EXISTS") {
          errors.email = "Email already exists. Please use a different email.";
        } else {
          errors.server =
            (error.body?.message || t.auth.somethingWentWrong) + ".";
        }
      }
    } else {
      throw error;
    }
  }
}

const signInUrl = localizeUrl("/sign-in", locale);
---

<Layout title={t.auth.signup}>
  <div
    class="flex min-h-[70dvh] w-full flex-col items-center justify-center py-12"
  >
    <div class="w-full max-w-xs">
      <h1 class="mb-8 text-center text-2xl font-bold">{t.auth.signup}</h1>

      <form method="POST">
        <ErrorMessage message={errors.server || errors.name || errors.email || errors.password} />

        <IconInputField
          type="text"
          placeholder={t.auth.name}
          name="name"
          required
          defaultValue={fields.name}
          iconName="User"
          className="mb-2"
          client:load
        />

        <IconInputField
          type="email"
          placeholder={t.auth.email}
          name="email"
          required
          defaultValue={fields.email}
          iconName="Mail"
          className="mb-2"
          client:load
        />

        <PasswordField
          name="password"
          data-testid="password-input"
          required
          defaultValue={fields.password}
          placeholder={t.auth.password}
          className="mb-4"
          client:load
        />

        <Button type="submit" data-testid="submit-button" className="mt-4 w-full">{t.auth.signup}</Button>

        <p class="mt-4 text-center text-sm">
          {t.auth.alreadyHaveAccount}{" "}
          <a href={signInUrl} class="text-primary underline">
            {t.auth.signinHere}
          </a>
        </p>
      </form>
    </div>
  </div>
</Layout>
