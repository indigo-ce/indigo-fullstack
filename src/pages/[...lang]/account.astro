---
import {getLocaleFromParams} from "@/i18n/utils";
import Layout from "@/layouts/Layout.astro";
import {Button} from "@/components/ui/button";
import {IconInputField} from "@/components/IconInputField.tsx";
import {PasswordField} from "@/components/PasswordField.tsx";
import ErrorMessage from "@/components/ErrorMessage.astro";
import SuccessMessage from "@/components/SuccessMessage.astro";
import {createAuth} from "@/lib/auth";
import type {APIError} from "better-auth/api";
import {useTranslationsFromParams, localizeUrl} from "@/i18n/utils";

const t = useTranslationsFromParams(Astro.params);
const locale = getLocaleFromParams(Astro.params);

if (!Astro.locals.user?.id)
  return Astro.redirect(localizeUrl("/sign-in", locale));
if (!Astro.locals.user.emailVerified)
  return Astro.redirect(localizeUrl("/verify-email", locale));

const errors = {
  name: "",
  email: "",
  currentPassword: "",
  newPassword: ""
};

const fields = {
  name: Astro.locals.user.name || "",
  email: Astro.locals.user.email,
  currentPassword: "",
  newPassword: ""
};

if (Astro.request.method === "POST") {
  const auth = createAuth(Astro.locals.runtime.env);
  const formData = await Astro.request.formData();
  const action = formData.get("action") as string;

  if (action === "update-profile") {
    const name = formData.get("name") as string;
    const email = formData.get("email") as string;
    fields.name = name;
    fields.email = email;

    let emailChanged = false;

    // Update name if changed
    if (name !== Astro.locals.user.name) {
      try {
        await auth.api.updateUser({
          body: {name},
          headers: Astro.request.headers
        });
      } catch (error) {
        console.error(error);
        errors.name = t.account.updateFailed;
      }
    }

    // Update email if changed
    if (email !== Astro.locals.user.email && !errors.name) {
      try {
        const {status} = await auth.api.changeEmail({
          body: {
            newEmail: email,
            callbackURL: localizeUrl("/account", locale)
          },
          headers: Astro.request.headers
        });

        if (!status) {
          errors.email = t.account.updateFailed;
        } else {
          emailChanged = true;
        }
      } catch (error) {
        console.error(error);
        errors.email = t.account.updateFailed;
      }
    }

    // Only redirect if no errors
    if (!errors.name && !errors.email) {
      const successParam = emailChanged
        ? "email-verification-sent"
        : "profile-updated";
      return Astro.redirect(
        localizeUrl(`/account?success=${successParam}`, locale)
      );
    }
  }

  if (action === "change-password") {
    const currentPassword = formData.get("currentPassword") as string;
    const newPassword = formData.get("newPassword") as string;

    fields.currentPassword = currentPassword;
    fields.newPassword = newPassword;

    try {
      await auth.api.changePassword({
        body: {
          currentPassword,
          newPassword,
          revokeOtherSessions: true
        },
        headers: Astro.request.headers
      });
      return Astro.redirect(
        localizeUrl("/account?success=password-changed", locale)
      );
    } catch (error) {
      const apiError = error as APIError;
      if (apiError.body?.code === "PASSWORD_TOO_SHORT") {
        errors.newPassword = "New password must be at least 8 characters long";
      } else if (apiError.body?.code === "INVALID_PASSWORD") {
        errors.currentPassword = "Current password is incorrect";
      } else {
        errors.currentPassword = t.account.updateFailed;
      }
    }
  }
}

const success = Astro.url.searchParams.get("success");
---

<Layout>
  <div class="flex w-full flex-col items-center justify-center py-12">
    <div class="w-full max-w-md space-y-8">
      <h1 class="mb-8 text-2xl font-bold">{t.account.title}</h1>

      <SuccessMessage
        message={success === "profile-updated"
          ? t.account.profileUpdated
          : success === "email-verification-sent"
            ? t.auth.checkEmail
            : success === "password-changed"
              ? t.auth.resetSuccess
              : undefined}
      />

      <div class="bg-card rounded-lg border p-6">
        <h2 class="mb-4 text-xl font-semibold">{t.account.editProfile}</h2>
        <form method="POST">
          <input type="hidden" name="action" value="update-profile" />
          <ErrorMessage message={errors.name || errors.email} />
          <IconInputField
            type="text"
            placeholder={t.account.name}
            name="name"
            required
            defaultValue={fields.name}
            iconName="User"
            className="mb-2"
            client:load
          />
          <IconInputField
            type="email"
            placeholder={t.account.email}
            name="email"
            required
            defaultValue={fields.email}
            iconName="Mail"
            className="mb-4"
            client:load
          />
          <Button type="submit" className="w-full">
            {t.account.update}
          </Button>
        </form>
      </div>

      <div class="bg-card rounded-lg border p-6">
        <h2 class="mb-4 text-xl font-semibold">{t.auth.password}</h2>
        <form method="POST" class="space-y-6">
          <input type="hidden" name="action" value="change-password" />
          <ErrorMessage
            message={errors.currentPassword || errors.newPassword}
          />
          <PasswordField
            name="currentPassword"
            className="mb-2"
            placeholder={t.auth.password}
            required
            defaultValue={fields.currentPassword}
            client:load
          />
          <PasswordField
            className="mb-4"
            name="newPassword"
            placeholder={t.auth.newPassword}
            required
            defaultValue={fields.newPassword}
            client:load
          />
          <Button type="submit" className="w-full">
            {t.account.update}
          </Button>
        </form>
      </div>
    </div>
  </div>
</Layout>
